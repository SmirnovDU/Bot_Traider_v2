#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ MySQL
"""

import os
import sys
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__)))

def debug_save_trade():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ MySQL"""
    print("üîç –î–µ–±–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ MySQL")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MySQL
    try:
        from bot.config import USE_MYSQL, MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
        print(f"   USE_MYSQL: {USE_MYSQL}")
        print(f"   MYSQL_HOST: {MYSQL_HOST}")
        print(f"   MYSQL_DATABASE: {MYSQL_DATABASE}")
        
        if not USE_MYSQL:
            print("   ‚ùå MySQL –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
    try:
        import mysql.connector
        conn = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã trades
        cur = conn.cursor()
        cur.execute("DESCRIBE trades")
        columns = cur.fetchall()
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã trades:")
        for col in columns:
            print(f"   {col[0]} - {col[1]}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ profit_no_fees
        column_names = [col[0] for col in columns]
        if 'profit_no_fees' not in column_names:
            print("   ‚ùå –ü–æ–ª–µ profit_no_fees –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        else:
            print("   ‚úÖ –ü–æ–ª–µ profit_no_fees –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cur.execute("SELECT COUNT(*) FROM trades")
        trades_count = cur.fetchone()[0]
        print(f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ trades: {trades_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
        cur.execute("SELECT request_id, timestamp, exchange, side, symbol FROM trades ORDER BY timestamp DESC LIMIT 3")
        recent_trades = cur.fetchall()
        if recent_trades:
            print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏:")
            for trade in recent_trades:
                print(f"   {trade[0]} - {trade[2]} {trade[3]} {trade[4]}")
        else:
            print("   üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ")
            
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
    try:
        from bot.db import save_trade
        from bot.utils import generate_request_id
        
        print("\nüíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏...")
        
        request_id = generate_request_id("TESTUSDT", "buy")
        test_trade = {
            "request_id": request_id,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "exchange": "Bybit",
            "side": "buy", 
            "symbol": "TESTUSDT",
            "price": 1.0,
            "qty": 10.0,
            "amount_usdt": 10.0,
            "fee": 0.0,
            "profit": None,
            "profit_no_fees": None,
            "balance_after": 990.0,
            "note": "Debug test trade"
        }
        
        save_trade(test_trade)
        print(f"   ‚úÖ –°–¥–µ–ª–∫–∞ {request_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    debug_save_trade()
