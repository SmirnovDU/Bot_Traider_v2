#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import os
from bot.telegram_notifier import notify_trade, notify_error, notify_status

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏
SAMPLE_TRADE_DATA = {
    "request_id": "BUY_BTCUSDT_1234567890",
    "timestamp": "2024-01-15T10:30:00Z",
    "exchange": "Bybit",
    "side": "buy",
    "symbol": "BTCUSDT",
    "price": 45000.50,
    "qty": 0.001,
    "amount_usdt": 45.0,
    "fee": 0.045,
    "profit": None,
    "balance_after": 955.0,
    "note": "Test order"
}

SAMPLE_SELL_TRADE_DATA = {
    "request_id": "SELL_BTCUSDT_1234567891",
    "timestamp": "2024-01-15T11:30:00Z",
    "exchange": "Binance",
    "side": "sell",
    "symbol": "BTCUSDT",
    "price": 45200.75,
    "qty": 0.001,
    "amount_usdt": 45.2,
    "fee": 0.0452,
    "profit": 0.1548,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
    "balance_after": 1000.15,
    "note": "Test sell order"
}


async def test_telegram_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from bot.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_ENABLED
    
    if not TELEGRAM_ENABLED:
        print("‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_ENABLED=True –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN")
        return False
    
    if not TELEGRAM_CHAT_ID:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_CHAT_ID")
        return False
    
    print(f"‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —á–∞—Ç–∞: {TELEGRAM_CHAT_ID}")
    print()
    
    # –¢–µ—Å—Ç 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ...")
    try:
        success = await notify_status("–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", {
            "–í–µ—Ä—Å–∏—è": "4.0",
            "–¢–µ—Å—Ç": "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
        })
        if success:
            print("‚úÖ –°—Ç–∞—Ç—É—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    # –¢–µ—Å—Ç 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ...")
    try:
        success = await notify_trade(SAMPLE_TRADE_DATA)
        if success:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å –ø—Ä–∏–±—ã–ª—å—é
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ...")
    try:
        success = await notify_trade(SAMPLE_SELL_TRADE_DATA)
        if success:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ: {e}")
    
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ...")
    try:
        success = await notify_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
        if success:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True


async def test_bot_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    from bot.config import TELEGRAM_BOT_TOKEN
    import aiohttp
    
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        bot_info = data.get("result", {})
                        print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω: @{bot_info.get('username', 'unknown')}")
                        return True
                    else:
                        print(f"‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {data}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    if not await test_bot_token():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    await test_telegram_notifications()


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    from decouple import config
    import sys
    import os
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main())
