#!/usr/bin/env python3

import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'test_secret'
os.environ['DEFAULT_EXCHANGE'] = 'bybit'
os.environ['TEST_BALANCE_USDT'] = '1000'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

def test_persistence():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–î –ø—Ä–∏ –¥–µ–ø–ª–æ–µ...")
    
    from bot.db import init_db, init_test_balances, save_trade, get_all_balances, get_trades_summary
    from bot.exchanges.bybit import BybitExchange
    from datetime import datetime, timezone
    
    # === –ü–ï–†–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    print("\n1Ô∏è‚É£ –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–ª–æ—è):")
    init_db()
    init_test_balances()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    balances = get_all_balances()
    print("üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
    for balance in balances:
        print(f"  {balance['exchange']} - {balance['coin']}: {balance['amount']}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    print("\nüí∞ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É DOTUSDT...")
    bybit = BybitExchange()
    
    # –ü–æ–∫—É–ø–∞–µ–º
    symbol = "DOTUSDT"
    usdt_amount = 10
    price = bybit.get_last_price(symbol)
    qty = usdt_amount / price
    
    result = bybit.place_order("buy", symbol, qty, "quoteCoin")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –ë–î
    import time
    unique_id = f"test_{int(time.time())}_DOTUSDT_BUY"
    trade_data = {
        "request_id": unique_id,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "exchange": "Bybit",
        "side": "buy",
        "symbol": symbol,
        "price": price,
        "qty": qty,
        "amount_usdt": usdt_amount,
        "fee": result['fee'],
        "profit": 0.0,
        "balance_after": bybit.get_balance("USDT"),
        "note": "–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
    }
    save_trade(trade_data)
    
    print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {qty:.6f} DOT –ø–æ ${price:.4f}")
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {bybit.get_balance('USDT')}")
    print(f"ü™ô –ë–∞–ª–∞–Ω—Å DOT: {bybit.get_balance('DOT')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    trades = get_trades_summary()
    print(f"üìú –°–¥–µ–ª–æ–∫ –≤ –ë–î: {trades['total_trades']}")
    
    # === –í–¢–û–†–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–ò–ú–ò–¢–ê–¶–ò–Ø –î–ï–ü–õ–û–Ø) ===
    print("\n2Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è):")
    init_db()
    init_test_balances()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    bybit2 = BybitExchange()
    balances_after = get_all_balances()
    trades_after = get_trades_summary()
    
    print("üìä –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
    for balance in balances_after:
        print(f"  {balance['exchange']} - {balance['coin']}: {balance['amount']}")
    
    print(f"ü™ô DOT –±–∞–ª–∞–Ω—Å: {bybit2.get_balance('DOT')}")
    print(f"üìú –°–¥–µ–ª–æ–∫ –≤ –ë–î: {trades_after['total_trades']}")
    
    # === –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
    print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DOT –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    dot_balance = bybit2.get_balance('DOT')
    if dot_balance > 0:
        print(f"‚úÖ DOT –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è: {dot_balance:.6f}")
    else:
        print(f"‚ùå DOT –±–∞–ª–∞–Ω—Å –ø–æ—Ç–µ—Ä—è–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ USDT –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 1000)
    usdt_balance = bybit2.get_balance('USDT')
    if usdt_balance < 1000:
        print(f"‚úÖ USDT –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è: {usdt_balance} (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫—É–ø–∫—É)")
    else:
        print(f"‚ùå USDT –±–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω –¥–æ {usdt_balance}!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    if trades_after['total_trades'] > 0:
        print(f"‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å: {trades_after['total_trades']}")
        if trades_after['recent_trades']:
            recent = trades_after['recent_trades'][0]
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: {recent['side']} {recent['symbol']} –Ω–∞ ${recent['amount_usdt']}")
    else:
        print(f"‚ùå –°–¥–µ–ª–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã!")
    
    print(f"\nüéØ –í–´–í–û–î: {'–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!' if dot_balance > 0 and trades_after['total_trades'] > 0 else '–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö!'}")

if __name__ == "__main__":
    test_persistence()
