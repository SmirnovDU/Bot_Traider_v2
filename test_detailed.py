#!/usr/bin/env python3

import os
import sys
import sqlite3

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'test_secret'
os.environ['DEFAULT_EXCHANGE'] = 'bybit'
os.environ['TEST_BALANCE_USDT'] = '100'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

def test_detailed():
    print("–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    from bot.db import init_db, init_test_balances, save_trade, get_balance
    from bot.exchanges.bybit import BybitExchange
    from bot.utils import generate_request_id, calculate_qty_by_precision, calculate_fee
    from datetime import datetime
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    init_test_balances()
    
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
    bybit = BybitExchange()
    
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT: {bybit.get_balance('USDT')}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    symbol = "BTCUSDT"
    usdt_amount = 10
    price = bybit.get_last_price(symbol)
    qty = calculate_qty_by_precision(usdt_amount, price, 6)
    fee = calculate_fee(qty * price, bybit.fee_percent)
    
    print(f"–ü–æ–∫—É–ø–∞–µ–º {qty} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
    print(f"–ö–æ–º–∏—Å—Å–∏—è: {fee}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    result = bybit.place_order("buy", symbol, qty, "quoteCoin")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏: {result}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    balance_after = bybit.get_balance("USDT")
    print(f"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {balance_after}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –ë–î
    trade_data = {
        "request_id": generate_request_id(symbol, "buy"),
        "timestamp": datetime.utcnow().isoformat(),
        "exchange": bybit.name,
        "side": "buy",
        "symbol": symbol,
        "price": price,
        "qty": qty,
        "amount_usdt": usdt_amount,
        "fee": fee,
        "profit": None,
        "balance_after": balance_after,
        "note": str(result)
    }
    
    save_trade(trade_data)
    print("–°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    conn = sqlite3.connect('bot/trades.db')
    cur = conn.cursor()
    
    cur.execute("SELECT * FROM trades")
    trades = cur.fetchall()
    print(f"–°–¥–µ–ª–æ–∫ –≤ –ë–î: {len(trades)}")
    for trade in trades:
        print(f"–°–¥–µ–ª–∫–∞: {trade}")
    
    cur.execute("SELECT * FROM balances")
    balances = cur.fetchall()
    print(f"–ë–∞–ª–∞–Ω—Å–æ–≤ –≤ –ë–î: {len(balances)}")
    for balance in balances:
        print(f"–ë–∞–ª–∞–Ω—Å: {balance}")
    
    conn.close()
    
    print("\nüéâ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_detailed()
