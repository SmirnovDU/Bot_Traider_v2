#!/usr/bin/env python3

import os
import sys
import asyncio
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'test_secret'
os.environ['DEFAULT_EXCHANGE'] = 'binance'
os.environ['TEST_BALANCE_USDT'] = '1000'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

async def test_webhook_binance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å Binance —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å –≤—ã–±–æ—Ä–æ–º Binance...")
    
    from bot.db import init_db, init_test_balances
    from bot.webhook import webhook
    from fastapi import Request
    from unittest.mock import AsyncMock
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    init_test_balances()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
    signal_data = {
        "secret": "test_secret",
        "action": "buy",
        "symbol": "DOTUSDT",
        "usdt_amount": 10
    }
    
    # –°–æ–∑–¥–∞—ë–º mock request
    mock_request = AsyncMock(spec=Request)
    mock_request.json = AsyncMock(return_value=signal_data)
    
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª: {signal_data}")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º webhook
        result = await webhook(mock_request)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç webhook: {result}")
        
        if result.get("status") == "success":
            print("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"–ë–∏—Ä–∂–∞: {result.get('exchange')}")
            print(f"–°–∏–º–≤–æ–ª: {result.get('symbol')}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result.get('qty')}")
            print(f"–¶–µ–Ω–∞: ${result.get('price'):.4f}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {result}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ webhook: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\nüéØ –¢–µ—Å—Ç webhook —Å Binance –ø—Ä–æ–π–¥–µ–Ω!")
    return True

if __name__ == "__main__":
    asyncio.run(test_webhook_binance())
