#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import asyncio
import json
from bot.telegram_bot import process_telegram_update, telegram_bot
from bot.db import init_db, init_test_balances, save_trade
from datetime import datetime, timezone


# –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
SAMPLE_UPDATES = {
    "help": {
        "message": {
            "message_id": 1,
            "from": {"id": 123456789, "first_name": "Test"},
            "chat": {"id": "123456789", "type": "private"},
            "date": 1673123456,
            "text": "/help"
        }
    },
    "status": {
        "message": {
            "message_id": 2,
            "from": {"id": 123456789, "first_name": "Test"},
            "chat": {"id": "123456789", "type": "private"},
            "date": 1673123456,
            "text": "/status"
        }
    },
    "balances": {
        "message": {
            "message_id": 3,
            "from": {"id": 123456789, "first_name": "Test"},
            "chat": {"id": "123456789", "type": "private"},
            "date": 1673123456,
            "text": "/balances"
        }
    },
    "profit": {
        "message": {
            "message_id": 4,
            "from": {"id": 123456789, "first_name": "Test"},
            "chat": {"id": "123456789", "type": "private"},
            "date": 1673123456,
            "text": "/profit"
        }
    },
    "summary": {
        "message": {
            "message_id": 5,
            "from": {"id": 123456789, "first_name": "Test"},
            "chat": {"id": "123456789", "type": "private"},
            "date": 1673123456,
            "text": "/summary"
        }
    },
    "unknown": {
        "message": {
            "message_id": 6,
            "from": {"id": 123456789, "first_name": "Test"},
            "chat": {"id": "123456789", "type": "private"},
            "date": 1673123456,
            "text": "/unknown_command"
        }
    }
}


def setup_test_data():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    init_test_balances()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
    test_trades = [
        {
            "request_id": "BUY_BTCUSDT_001",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "exchange": "Bybit",
            "side": "buy",
            "symbol": "BTCUSDT",
            "price": 45000.0,
            "qty": 0.001,
            "amount_usdt": 45.0,
            "fee": 0.045,
            "profit": None,
            "balance_after": 955.0,
            "note": "Test buy order"
        },
        {
            "request_id": "SELL_BTCUSDT_001",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "exchange": "Bybit",
            "side": "sell",
            "symbol": "BTCUSDT",
            "price": 45500.0,
            "qty": 0.001,
            "amount_usdt": 45.5,
            "fee": 0.0455,
            "profit": 0.4545,  # –ü—Ä–∏–±—ã–ª—å
            "balance_after": 1000.45,
            "note": "Test sell order"
        },
        {
            "request_id": "BUY_ETHUSDT_001",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "exchange": "Binance",
            "side": "buy",
            "symbol": "ETHUSDT",
            "price": 3000.0,
            "qty": 0.01,
            "amount_usdt": 30.0,
            "fee": 0.03,
            "profit": None,
            "balance_after": 970.0,
            "note": "Test ETH buy"
        },
        {
            "request_id": "SELL_ETHUSDT_001",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "exchange": "Binance",
            "side": "sell",
            "symbol": "ETHUSDT",
            "price": 2950.0,
            "qty": 0.01,
            "amount_usdt": 29.5,
            "fee": 0.0295,
            "profit": -0.5595,  # –£–±—ã—Ç–æ–∫
            "balance_after": 999.47,
            "note": "Test ETH sell"
        }
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
    for trade in test_trades:
        try:
            save_trade(trade)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {trade['request_id']}: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


async def test_command(command_name: str, update: dict):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É: {command_name}")
    
    # –ó–∞–º–µ–Ω—è–µ–º chat_id –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from bot.config import TELEGRAM_CHAT_ID
    if TELEGRAM_CHAT_ID:
        update["message"]["chat"]["id"] = TELEGRAM_CHAT_ID
    
    try:
        success = await process_telegram_update(update)
        if success:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {command_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ {command_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        return success
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command_name}: {e}")
        return False


async def test_all_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –∫–æ–º–∞–Ω–¥")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from bot.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_ENABLED
    
    if not TELEGRAM_ENABLED:
        print("‚ùå Telegram –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_ENABLED=True –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN")
        return False
    
    if not TELEGRAM_CHAT_ID:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_CHAT_ID")
        return False
    
    print(f"‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —á–∞—Ç–∞: {TELEGRAM_CHAT_ID}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    setup_test_data()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    results = {}
    
    for command_name, update in SAMPLE_UPDATES.items():
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        success = await test_command(command_name, update)
        results[command_name] = success
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 30)
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    
    for command, success in results.items():
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{command:12} - {status}")
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    
    if passed_tests == total_tests:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    return passed_tests == total_tests


async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    import httpx
    
    base_url = "http://localhost:8000"
    get_endpoints = ["/status", "/balances", "/profit", "/telegram-webhook"]
    
    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET endpoints
        for endpoint in get_endpoints:
            try:
                response = await client.get(f"{base_url}{endpoint}")
                if response.status_code == 200:
                    print(f"‚úÖ GET {endpoint} - OK")
                    data = response.json()
                    print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)[:100]}...")
                else:
                    print(f"‚ùå GET {endpoint} - Error {response.status_code}")
            except Exception as e:
                print(f"‚ùå GET {endpoint} - Exception: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST telegram-webhook
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /telegram-webhook...")
        test_update = {
            "message": {
                "chat": {"id": "123456789"},
                "text": "/status"
            }
        }
        
        try:
            response = await client.post(f"{base_url}/telegram-webhook", json=test_update)
            if response.status_code == 200:
                print("‚úÖ POST /telegram-webhook - OK")
                data = response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
            else:
                print(f"‚ùå POST /telegram-webhook - Error {response.status_code}")
        except Exception as e:
            print(f"‚ùå POST /telegram-webhook - Exception: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Telegram –∫–æ–º–∞–Ω–¥")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    success = await test_all_commands()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\n" + "=" * 50)
    await test_api_endpoints()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return success


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())
