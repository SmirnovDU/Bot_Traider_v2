#!/usr/bin/env python3

import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'test_secret'
os.environ['DEFAULT_EXCHANGE'] = 'binance'
os.environ['TEST_BALANCE_USDT'] = '1000'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

def test_binance_place_order():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è place_order –¥–ª—è Binance"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ place_order –¥–ª—è Binance —Å market_unit...")
    
    from bot.db import init_db, init_test_balances
    from bot.exchanges.binance import BinanceExchange
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    init_test_balances()
    
    # –°–æ–∑–¥–∞—ë–º –±–∏—Ä–∂—É
    binance = BinanceExchange()
    
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT: {binance.get_balance('USDT')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Å market_unit (–∫–∞–∫ —É Bybit)
    symbol = "DOTUSDT"
    price = binance.get_last_price(symbol)
    qty = 10 / price  # 10 USDT
    
    print(f"–¶–µ–Ω–∞ {symbol}: ${price:.4f}")
    print(f"–ü–æ–∫—É–ø–∞–µ–º {qty:.6f} DOT")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Å 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–∫–∞–∫ Bybit)
        result = binance.place_order("buy", symbol, qty, "quoteCoin")
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è place_order —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
        usdt_after = binance.get_balance("USDT")
        dot_after = binance.get_balance("DOT")
        
        print(f"USDT –ø–æ—Å–ª–µ: {usdt_after}")
        print(f"DOT –ø–æ—Å–ª–µ: {dot_after}")
        
        if usdt_after < 1000 and dot_after > 0:
            print("‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    print("\nüéØ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! Binance —Ç–µ–ø–µ—Ä—å —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Bybit API.")
    return True

if __name__ == "__main__":
    test_binance_place_order()
