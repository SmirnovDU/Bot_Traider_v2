#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å –±–∏—Ä–∂–µ–π –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
"""

import os
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__)))

def test_fast_webhook():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –±—ã—Å—Ç—Ä–æ–π –ª–æ–≥–∏–∫–∏ webhook"""
    print("üöÄ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
    
    try:
        from bot.exchange_selector import ExchangeSelector
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        selector = ExchangeSelector()
        
        print("\nüîß –¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –±–∏—Ä–∂–∏:")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏—Ä–∂–∏ –ø–æ –∏–º–µ–Ω–∏
        bybit = selector.get_exchange_by_name("bybit")
        print(f"   bybit -> {bybit.name}")
        
        binance = selector.get_exchange_by_name("binance")
        print(f"   binance -> {binance.name}")
        
        # –¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –±–∏—Ä–∂–∏
        unknown = selector.get_exchange_by_name("unknown")
        print(f"   unknown -> {unknown.name} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Bybit –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        
        print("\nüì® –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö JSON —Å–∏–≥–Ω–∞–ª–æ–≤:")
        
        # –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = [
            {
                "secret": "kljGCCKJS78ef6vLKGA88",
                "action": "buy",
                "symbol": "BTCUSDT",
                "usdt_amount": "10",
                "exchange": "bybit"
            },
            {
                "secret": "kljGCCKJS78ef6vLKGA88", 
                "action": "sell",
                "symbol": "ETHUSDT",
                "usdt_amount": "10",
                "exchange": "binance"
            }
        ]
        
        for i, signal in enumerate(signals, 1):
            print(f"   –°–∏–≥–Ω–∞–ª {i}: {json.dumps(signal, ensure_ascii=False)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏—Ä–∂–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è
            exchange_name = signal.get("exchange", "bybit").lower()
            exchange = selector.get_exchange_by_name(exchange_name)
            
            print(f"     -> –ë–∏—Ä–∂–∞: {exchange.name}")
            print(f"     -> –î–µ–π—Å—Ç–≤–∏–µ: {signal['action']}")
            print(f"     -> –°–∏–º–≤–æ–ª: {signal['symbol']}")
        
        print("\n‚ö° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏:")
        print("   ‚úÖ –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥–≤—É–º –±–∏—Ä–∂–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("   ‚úÖ –ù–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω")
        print("   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("   ‚úÖ –ë–∏—Ä–∂–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ TradingView")
        print("   ‚úÖ –ú–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_fast_webhook()
