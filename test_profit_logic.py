#!/usr/bin/env python3

import os
import sys
import asyncio

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'test_secret'
os.environ['DEFAULT_EXCHANGE'] = 'bybit'
os.environ['TEST_BALANCE_USDT'] = '1000'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

async def test_profit_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏ - –ø–æ–∫—É–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–±—ã—Ç–∫–∏"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏...")
    
    from bot.db import init_db, init_test_balances, get_trades_summary, get_profit_statistics
    from bot.telegram_bot import TelegramBot
    from unittest.mock import AsyncMock
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    init_test_balances()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    trades_summary = get_trades_summary()
    profit_stats = get_profit_statistics()
    
    print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trades_summary['total_trades']}")
    print(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {len(trades_summary['recent_trades'])}")
    print(f"üìà –°–¥–µ–ª–∫–∏ —Å –ø—Ä–∏–±—ã–ª—å—é: {profit_stats['total_trades_with_profit']}")
    print(f"üíö –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ: {profit_stats['profitable_trades']}")
    print(f"‚ù§Ô∏è –£–±—ã—Ç–æ—á–Ω—ã–µ: {profit_stats['losing_trades']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫:")
    for i, trade in enumerate(trades_summary['recent_trades'][:5]):
        side = trade['side']
        symbol = trade['symbol']
        profit = trade['profit']
        amount = trade['amount_usdt']
        
        print(f"  {i+1}. {side.upper()} {symbol}: ${amount:.2f} - profit: {profit}")
        
        if side == "buy" and profit is not None and profit != 0:
            print(f"    ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∫—É–ø–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∏–±—ã–ª—å: {profit}")
        elif side == "sell" and profit is None:
            print(f"    ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∏–±—ã–ª—å")
        else:
            print(f"    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /summary
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /summary:")
    
    bot = TelegramBot()
    sent_messages = []
    
    async def mock_send(message):
        sent_messages.append(message)
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        print(message)
        
    bot.send_message = mock_send
    
    try:
        await bot.handle_summary()
        
        if sent_messages:
            message = sent_messages[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫—É–ø–∫–∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏–±—ã–ª—å
            lines = message.split('\n')
            for line in lines:
                if "üü¢" in line and ("‚ù§Ô∏è$" in line or "üíö$" in line):
                    print(f"‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∫—É–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å: {line}")
                elif "üü¢" in line:
                    print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –ë–ï–ó –ø—Ä–∏–±—ã–ª–∏: {line}")
                elif "üî¥" in line and ("‚ù§Ô∏è$" in line or "üíö$" in line):
                    print(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –° –ø—Ä–∏–±—ã–ª—å—é: {line}")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_summary: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_profit_logic())
