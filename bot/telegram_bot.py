import aiohttp
import asyncio
import json
from loguru import logger
from bot.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_ENABLED, TEST_MODE, TELEGRAM_BOT_WEBHOOK_URL
from bot.db import get_all_balances, get_profit_statistics, get_trades_summary
from typing import Optional, Dict, Any
from datetime import datetime, timezone


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.enabled = TELEGRAM_ENABLED and self.bot_token and self.chat_id
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        if not self.enabled:
            logger.info("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            logger.info(f"Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {self.chat_id}")
    
    async def send_message(self, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.enabled:
            return False
        
        url = f"{self.base_url}/sendMessage"
        payload = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status} - {error_text}")
                        return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_update(self, update: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
        try:
            message = update.get("message", {})
            chat_id = message.get("chat", {}).get("id")
            text = message.get("text", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            if str(chat_id) != str(self.chat_id):
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
                return False
            
            if not text.startswith("/"):
                return False
            
            command = text.strip().lower()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if command == "/start" or command == "/help":
                await self.handle_help()
            elif command == "/status":
                await self.handle_status()
            elif command == "/balances":
                await self.handle_balances()
            elif command == "/profit":
                await self.handle_profit()
            elif command == "/strategy":
                await self.handle_strategy()
            elif command == "/summary":
                await self.handle_summary()
            else:
                await self.handle_unknown_command(command)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await self.send_message(f"üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            return False
    
    async def handle_help(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üìä <b>/status</b> - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üí∞ <b>/balances</b> - –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º
üìà <b>/profit</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤
üß™ <b>/strategy</b> - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø—Ä–∏–±—ã–ª—å –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π)
üìã <b>/summary</b> - –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
‚ùì <b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üî∏ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –∏ –æ—à–∏–±–∫–∞—Ö.
üî∏ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
        """
        await self.send_message(help_text.strip())
    
    async def handle_status(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            mode = "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" if TEST_MODE else "üöÄ –ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º"
            current_time = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            trades_summary = get_trades_summary()
            profit_stats = get_profit_statistics()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ)
            import time
            uptime_seconds = int(time.time()) % 86400  # —Å–µ–∫—É–Ω–¥—ã —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è
            uptime_hours = uptime_seconds // 3600
            uptime_minutes = (uptime_seconds % 3600) // 60
            
            status_text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>

üî∏ <b>–†–µ–∂–∏–º:</b> {mode}
üïí <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {current_time}
‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> ~{uptime_hours}—á {uptime_minutes}–º
üìä <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {trades_summary['total_trades']}
üí∞ <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_stats['total_profit']:.4f}
üí∏ <b>–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:</b> ${profit_stats['total_fees']:.4f}
üìà <b>–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤:</b> ${profit_stats['total_volume']:.2f}

‚úÖ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>
            """
            await self.send_message(status_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_status: {e}")
            await self.send_message(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    async def handle_balances(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balances"""
        try:
            balances = get_all_balances()
            
            if not balances:
                await self.send_message("üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã –ø—É—Å—Ç—ã</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
            
            balance_text = "üí∞ <b>–¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∏—Ä–∂–∞–º
            bybit_balances = []
            binance_balances = []
            
            for balance in balances:
                exchange = balance['exchange']
                coin = balance['coin']
                amount = balance['amount']
                if exchange == "Bybit":
                    bybit_balances.append((coin, amount))
                elif exchange == "Binance":
                    binance_balances.append((coin, amount))
            
            # Bybit –±–∞–ª–∞–Ω—Å—ã
            if bybit_balances:
                balance_text += "üü¶ <b>Bybit:</b>\n"
                for coin, amount in bybit_balances:
                    balance_text += f"   ‚Ä¢ {coin}: {amount:.6f}\n"
                balance_text += "\n"
            
            # Binance –±–∞–ª–∞–Ω—Å—ã
            if binance_balances:
                balance_text += "üü® <b>Binance:</b>\n"
                for coin, amount in binance_balances:
                    balance_text += f"   ‚Ä¢ {coin}: {amount:.6f}\n"
            
            await self.send_message(balance_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_balances: {e}")
            await self.send_message(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}")
    
    async def handle_profit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profit"""
        try:
            stats = get_profit_statistics()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
            profit_emoji = "üíö" if stats['total_profit'] > 0 else "‚ù§Ô∏è" if stats['total_profit'] < 0 else "üíõ"
            
            profit_text = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏:</b>

{profit_emoji} <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${stats['total_profit']:.4f}
üìä <b>–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:</b> ${stats['avg_profit']:.4f}
üéØ <b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:</b> {stats['win_rate']:.1f}%

‚úÖ <b>–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {stats['profitable_trades']}
‚ùå <b>–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {stats['losing_trades']}
üìã <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —Å P&L:</b> {stats['total_trades_with_profit']}

üèÜ <b>–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:</b> ${stats['best_trade']:.4f}
üìâ <b>–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:</b> ${stats['worst_trade']:.4f}

üí∏ <b>–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:</b> ${stats['total_fees']:.4f}
üìä <b>–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤:</b> ${stats['total_volume']:.2f}
            """
            
            await self.send_message(profit_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_profit: {e}")
            await self.send_message(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏: {str(e)}")
    
    async def handle_strategy(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /strategy - –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π"""
        try:
            from bot.db import get_profit_statistics_no_fees, get_profit_statistics
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π
            stats_no_fees = get_profit_statistics_no_fees()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            stats_with_fees = get_profit_statistics()
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏ –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π
            profit_emoji_no_fees = "üíö" if stats_no_fees['total_profit_no_fees'] > 0 else "‚ù§Ô∏è" if stats_no_fees['total_profit_no_fees'] < 0 else "üíõ"
            
            strategy_text = f"""
üß™ <b>–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π):</b>

{profit_emoji_no_fees} <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π:</b> ${stats_no_fees['total_profit_no_fees']:.4f}
üìä <b>–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π:</b> ${stats_no_fees['avg_profit_no_fees']:.4f}
üéØ <b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π:</b> {stats_no_fees['win_rate_no_fees']:.1f}%

‚úÖ <b>–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {stats_no_fees['profitable_trades_no_fees']}
‚ùå <b>–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {stats_no_fees['losing_trades_no_fees']}
üìã <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {stats_no_fees['total_trades_with_profit_no_fees']}

üèÜ <b>–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞ –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π:</b> ${stats_no_fees['best_trade_no_fees']:.4f}
üìâ <b>–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞ –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π:</b> ${stats_no_fees['worst_trade_no_fees']:.4f}

<b>üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π:</b>
‚Ä¢ –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π: ${stats_no_fees['total_profit_no_fees']:.4f}
‚Ä¢ –° –∫–æ–º–∏—Å—Å–∏—è–º–∏: ${stats_with_fees['total_profit']:.4f}
‚Ä¢ –ü–æ—Ç–µ—Ä–∏ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—è—Ö: ${stats_with_fees['total_fees']:.4f}

üí° <b>–í—ã–≤–æ–¥:</b> {'–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–º–∏—Å—Å–∏—è—Ö' if stats_no_fees['total_profit_no_fees'] > 0 > stats_with_fees['total_profit'] else '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ' if stats_no_fees['total_profit_no_fees'] > 0 else '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}
            """
            
            await self.send_message(strategy_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_strategy: {e}")
            await self.send_message(f"üö® –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}")
    
    async def handle_summary(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summary"""
        try:
            summary = get_trades_summary()
            
            summary_text = f"üìã <b>–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:</b>\n\n"
            summary_text += f"üìä <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {summary['total_trades']}\n\n"
            
            if summary['recent_trades']:
                summary_text += "üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:</b>\n"
                for trade in summary['recent_trades']:
                    timestamp = trade['timestamp']
                    exchange = trade['exchange']
                    side = trade['side']
                    symbol = trade['symbol']
                    price = trade['price']
                    qty = trade['qty']
                    amount_usdt = trade['amount_usdt']
                    profit = trade['profit']
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    try:
                        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                        time_str = dt.strftime("%m-%d %H:%M")
                    except:
                        time_str = timestamp[:16]
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
                    side_emoji = "üü¢" if side == "buy" else "üî¥"
                    
                    # –ü—Ä–∏–±—ã–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂)
                    profit_str = ""
                    if side == "sell" and profit is not None:
                        profit_emoji = "üíö" if profit > 0 else "‚ù§Ô∏è"
                        profit_str = f" {profit_emoji}${profit:.3f}"
                    
                    summary_text += f"{side_emoji} {time_str} {exchange} {symbol} ${amount_usdt:.2f}{profit_str}\n"
            else:
                summary_text += "üì≠ –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            await self.send_message(summary_text.strip())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_summary: {e}")
            await self.send_message(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {str(e)}")
    
    async def handle_unknown_command(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        unknown_text = f"""
‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:</b> {command}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        """
        await self.send_message(unknown_text.strip())
    
    async def setup_webhook(self, webhook_url: str) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
        if not self.enabled:
            return False
        
        url = f"{self.base_url}/setWebhook"
        payload = {
            "url": webhook_url,
            "allowed_updates": ["message"]
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            logger.info(f"Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}")
                            return True
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {result}")
                            return False
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: {response.status} - {error_text}")
                        return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: {e}")
            return False
    
    async def remove_webhook(self) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
        if not self.enabled:
            return False
        
        url = f"{self.base_url}/deleteWebhook"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            logger.info("Telegram webhook —É–¥–∞–ª—ë–Ω")
                            return True
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {result}")
                            return False
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {response.status} - {error_text}")
                        return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBot()


# –§—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏
async def process_telegram_update(update: Dict[str, Any]) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    return await telegram_bot.process_update(update)


async def send_telegram_message(text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    return await telegram_bot.send_message(text)


async def setup_telegram_webhook() -> bool:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook (–µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω)"""
    if TELEGRAM_BOT_WEBHOOK_URL:
        return await telegram_bot.setup_webhook(TELEGRAM_BOT_WEBHOOK_URL)
    return False


async def remove_telegram_webhook() -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ Telegram webhook"""
    return await telegram_bot.remove_webhook()
