"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–Ω–µ—Ç–∞–º–∏
"""

import asyncio
from loguru import logger
from datetime import datetime, timezone
from bot.db import get_all_balances, save_trade, update_balance
from bot.exchange_selector import ExchangeSelector
from bot.utils import generate_request_id, calculate_fee_for_sell
from bot.config import TEST_MODE

class MassOperations:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.exchange_selector = ExchangeSelector()
    
    async def sell_all_coins(self, exchange_name: str = None) -> dict:
        """
        –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ –∏–ª–∏ –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ ("bybit", "binance") –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            balances = get_all_balances()
            if not balances:
                return {
                    "success": True,
                    "message": "–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏",
                    "trades": [],
                    "total_profit": 0.0
                }
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ –±–∏—Ä–∂–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if exchange_name:
                balances = [b for b in balances if b['exchange'].lower() == exchange_name.lower()]
                if not balances:
                    return {
                        "success": True,
                        "message": f"–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {exchange_name}",
                        "trades": [],
                        "total_profit": 0.0
                    }
            
            # –ò—Å–∫–ª—é—á–∞–µ–º USDT –∏–∑ –ø—Ä–æ–¥–∞–∂–∏
            balances = [b for b in balances if b['coin'] != 'USDT']
            
            if not balances:
                return {
                    "success": True,
                    "message": "–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—Ç–æ–ª—å–∫–æ USDT)",
                    "trades": [],
                    "total_profit": 0.0
                }
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É {len(balances)} –º–æ–Ω–µ—Ç")
            
            trades = []
            total_profit = 0.0
            successful_trades = 0
            failed_trades = 0
            
            for balance in balances:
                try:
                    result = await self._sell_single_coin(balance)
                    if result['success']:
                        trades.append(result)
                        total_profit += result.get('profit', 0.0)
                        successful_trades += 1
                    else:
                        failed_trades += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {balance['coin']}: {result['error']}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    failed_trades += 1
                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ {balance['coin']}: {e}")
            
            message = f"–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_trades} —É—Å–ø–µ—à–Ω–æ, {failed_trades} –Ω–µ—É–¥–∞—á–Ω–æ"
            if exchange_name:
                message += f" –Ω–∞ {exchange_name}"
            
            return {
                "success": True,
                "message": message,
                "trades": trades,
                "total_profit": total_profit,
                "successful_trades": successful_trades,
                "failed_trades": failed_trades
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return {
                "success": False,
                "error": str(e),
                "trades": [],
                "total_profit": 0.0
            }
    
    async def _sell_single_coin(self, balance: dict) -> dict:
        """
        –ü—Ä–æ–¥–∞—Ç—å –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É
        
        Args:
            balance: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            exchange_name = balance['exchange']
            coin = balance['coin']
            amount = balance['amount']
            
            if amount <= 0:
                return {
                    "success": False,
                    "error": f"–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å {coin}",
                    "coin": coin,
                    "exchange": exchange_name
                }
            
            symbol = f"{coin}USDT"
            qty = amount
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if qty <= 0:
                return {
                    "success": False,
                    "error": f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {coin}",
                    "coin": coin,
                    "exchange": exchange_name,
                    "qty": qty
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º request_id
            request_id = generate_request_id(symbol, "sell")
            
            if TEST_MODE:
                # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏, –Ω–æ –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                logger.info(f"üß™ –¢–ï–°–¢: –ü—Ä–æ–¥–∞—ë–º {qty} {coin} –Ω–∞ {exchange_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∏—Ä–∂—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã
                exchange = self.exchange_selector.get_exchange_by_name(exchange_name)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏
                try:
                    price = exchange.get_last_price(symbol)
                    logger.info(f"üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ {coin} —Å {exchange_name}: ${price}")
                except Exception as e:
                    logger.warning(f"üß™ –¢–ï–°–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {coin} —Å {exchange_name}: {e}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ fallback
                    if coin == "BTC":
                        price = 45000.0
                    elif coin == "ETH":
                        price = 3000.0
                    elif coin == "ADA":
                        price = 0.5
                    elif coin == "DOT":
                        price = 7.0
                    else:
                        price = 1.0
                    logger.info(f"üß™ –¢–ï–°–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {coin}: ${price}")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (0.1% –æ—Ç —Å—É–º–º—ã)
                fee = (qty * price) * 0.001
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT –∏–∑ –ë–î
                from bot.db import get_balance
                current_usdt_balance = get_balance(exchange_name, "USDT")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT (—Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å –±–∏—Ä–∂–∏)
                new_usdt_balance = current_usdt_balance + (qty * price) - fee
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ —Å –±–∏—Ä–∂–∏
                profit = (qty * price) - fee
                profit_no_fees = qty * price  # –ü—Ä–∏–±—ã–ª—å –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                trade_data = {
                    "request_id": request_id,
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "exchange": exchange_name,
                    "side": "sell",
                    "symbol": symbol,
                    "price": price,
                    "qty": qty,
                    "amount_usdt": qty * price,
                    "fee": fee,
                    "profit": profit,
                    "profit_no_fees": profit_no_fees,
                    "balance_after": new_usdt_balance,
                    "note": f"–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú) - —Ü–µ–Ω–∞ —Å {exchange_name}"
                }
                save_trade(trade_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
                update_balance(exchange_name, coin, 0.0)  # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã
                update_balance(exchange_name, "USDT", new_usdt_balance)  # –û–±–Ω–æ–≤–ª—è–µ–º USDT
                
                logger.info(f"üß™ –¢–ï–°–¢: –ü—Ä–æ–¥–∞–∂–∞ {coin} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏–±—ã–ª—å: ${profit:.4f}")
                
                return {
                    "success": True,
                    "coin": coin,
                    "exchange": exchange_name,
                    "qty": qty,
                    "price": price,
                    "profit": profit,
                    "fee": fee,
                    "request_id": request_id
                }
            else:
                # –ë–û–ï–í–û–ô –†–ï–ñ–ò–ú - —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∏—Ä–∂–∞–º–∏
                exchange = self.exchange_selector.get_exchange_by_name(exchange_name)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                price = exchange.get_last_price(symbol)
                
                logger.info(f"–ü—Ä–æ–¥–∞—ë–º {qty} {coin} –ø–æ —Ü–µ–Ω–µ {price} –Ω–∞ {exchange_name}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
                result = exchange.place_order(symbol, "sell", qty, price)
                
                if result.get("success"):
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–∏–±—ã–ª—å
                    fee = calculate_fee_for_sell(qty, price, result.get("balance_after", 0))
                    
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                    balance_after = exchange.get_balance("USDT")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å (–¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ)
                    profit = (qty * price) - fee
                    profit_no_fees = qty * price  # –ü—Ä–∏–±—ã–ª—å –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                    trade_data = {
                        "request_id": request_id,
                        "timestamp": datetime.now(timezone.utc).isoformat(),
                        "exchange": exchange_name,
                        "side": "sell",
                        "symbol": symbol,
                        "price": price,
                        "qty": qty,
                        "amount_usdt": qty * price,
                        "fee": fee,
                        "profit": profit,
                        "profit_no_fees": profit_no_fees,
                        "balance_after": balance_after,
                        "note": f"–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ - {result.get('note', '')}"
                    }
                    save_trade(trade_data)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
                    update_balance(exchange_name, coin, 0.0)  # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã
                    update_balance(exchange_name, "USDT", balance_after)  # –û–±–Ω–æ–≤–ª—è–µ–º USDT
                    
                    return {
                        "success": True,
                        "coin": coin,
                        "exchange": exchange_name,
                        "qty": qty,
                        "price": price,
                        "profit": profit,
                        "fee": fee,
                        "request_id": request_id
                    }
                else:
                    return {
                        "success": False,
                        "error": result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                        "coin": coin,
                        "exchange": exchange_name,
                        "qty": qty,
                        "price": price
                    }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {balance.get('coin', 'unknown')}: {e}")
            return {
                "success": False,
                "error": str(e),
                "coin": balance.get('coin', 'unknown'),
                "exchange": balance.get('exchange', 'unknown')
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
mass_operations = MassOperations()


# –§—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def sell_all_coins(exchange_name: str = None) -> dict:
    """–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ –∏–ª–∏ –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö"""
    return await mass_operations.sell_all_coins(exchange_name)


async def sell_all_binance() -> dict:
    """–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ Binance"""
    return await mass_operations.sell_all_coins("binance")


async def sell_all_bybit() -> dict:
    """–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ Bybit"""
    return await mass_operations.sell_all_coins("bybit")
