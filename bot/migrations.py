"""
–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
"""

from loguru import logger
from bot.config import USE_MYSQL


def get_table_columns(cur, table_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
    if USE_MYSQL:
        cur.execute(f"DESCRIBE {table_name}")
        return [row[0] for row in cur.fetchall()]
    else:
        cur.execute(f"PRAGMA table_info({table_name})")
        return [row[1] for row in cur.fetchall()]


def add_column_if_not_exists(cur, table_name, column_name, column_definition):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    existing_columns = get_table_columns(cur, table_name)
    
    if column_name not in existing_columns:
        if USE_MYSQL:
            sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_definition}"
        else:
            sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_definition}"
        
        logger.info(f"üîß –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü {column_name} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
        cur.execute(sql)
        return True
    else:
        logger.debug(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
        return False


def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    if USE_MYSQL:
        apply_mysql_migrations()
    else:
        apply_sqlite_migrations()


def apply_mysql_migrations():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è MySQL"""
    try:
        import mysql.connector
        from bot.config import MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE
        
        conn = mysql.connector.connect(
            host=MYSQL_HOST,
            port=MYSQL_PORT,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
        cur = conn.cursor()
        
        migrations_applied = 0
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ profit_no_fees –≤ trades
        if add_column_if_not_exists(cur, "trades", "profit_no_fees", "DECIMAL(20,8)"):
            migrations_applied += 1
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            cur.execute("CREATE INDEX IF NOT EXISTS idx_trades_exchange_symbol ON trades(exchange, symbol)")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_trades_side ON trades(side)")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_trades_timestamp ON trades(timestamp)")
            logger.debug("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
        except mysql.connector.Error as e:
            if "Duplicate key name" not in str(e):
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ request_id —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            cur.execute("ALTER TABLE trades ADD UNIQUE KEY uk_request_id (request_id)")
            logger.info("üîß –î–æ–±–∞–≤–ª–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è request_id")
            migrations_applied += 1
        except mysql.connector.Error as e:
            if "Duplicate key name" in str(e) or "already exists" in str(e):
                logger.debug("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á request_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
        
        # –ë—É–¥—É—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–¥–µ—Å—å...
        # if add_column_if_not_exists(cur, "trades", "new_column", "VARCHAR(255)"):
        #     migrations_applied += 1
        
        conn.commit()
        conn.close()
        
        if migrations_applied > 0:
            logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {migrations_applied} –º–∏–≥—Ä–∞—Ü–∏–π MySQL")
        else:
            logger.info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ MySQL —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π MySQL: {e}")
        raise


def apply_sqlite_migrations():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è SQLite"""
    try:
        import sqlite3
        from bot.config import DB_PATH
        
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        
        migrations_applied = 0
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ profit_no_fees –≤ trades
        if add_column_if_not_exists(cur, "trades", "profit_no_fees", "REAL"):
            migrations_applied += 1
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
        try:
            cur.execute("CREATE INDEX IF NOT EXISTS idx_trades_exchange_symbol ON trades(exchange, symbol)")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_trades_side ON trades(side)")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_trades_timestamp ON trades(timestamp)")
            logger.debug("‚úÖ –ò–Ω–¥–µ–∫—Å—ã SQLite –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
        except sqlite3.Error as e:
            logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ SQLite: {e}")
        
        # –ë—É–¥—É—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–¥–µ—Å—å...
        # if add_column_if_not_exists(cur, "trades", "new_column", "TEXT"):
        #     migrations_applied += 1
        
        conn.commit()
        conn.close()
        
        if migrations_applied > 0:
            logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {migrations_applied} –º–∏–≥—Ä–∞—Ü–∏–π SQLite")
        else:
            logger.info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ SQLite —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π SQLite: {e}")
        raise


def create_migration_template(migration_name):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    template = f'''
# –ú–∏–≥—Ä–∞—Ü–∏—è: {migration_name}
# –î–æ–±–∞–≤–∏—Ç—å –≤ apply_mysql_migrations() –∏ apply_sqlite_migrations():

# –î–ª—è MySQL:
if add_column_if_not_exists(cur, "table_name", "column_name", "COLUMN_TYPE"):
    migrations_applied += 1

# –î–ª—è SQLite:  
if add_column_if_not_exists(cur, "table_name", "column_name", "COLUMN_TYPE"):
    migrations_applied += 1
'''
    
    print(template)
    return template


if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–π
    import sys
    import os
    sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π")
    apply_migrations()
