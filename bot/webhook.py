from fastapi import APIRouter, Request, HTTPException
from loguru import logger
from bot.config import WEBHOOK_SECRET, DEFAULT_EXCHANGE
from bot.db import save_trade, get_last_buy_price, has_previous_buy, get_unsold_quantity, get_exchange_with_coins
from bot.utils import generate_request_id, calculate_qty_by_precision
from bot.exchange_selector import ExchangeSelector
from bot.telegram_notifier import notify_trade, notify_error
from datetime import datetime, timezone

router = APIRouter()
exchange_selector = ExchangeSelector()


@router.post("/webhook")
async def webhook(request: Request):
    try:
    data = await request.json()
    except Exception as e:
        body = await request.body()
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        logger.error(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {body.decode('utf-8')[:500]}")
        raise HTTPException(status_code=400, detail="Invalid JSON format")
    
    logger.info(f"–°–∏–≥–Ω–∞–ª: {data}")

    if data.get("secret") != WEBHOOK_SECRET:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: –ø–æ–ª—É—á–µ–Ω '{data.get('secret')}', –æ–∂–∏–¥–∞–µ—Ç—Å—è '{WEBHOOK_SECRET}'")
        raise HTTPException(status_code=403, detail="Access denied")

    side = data.get("action", "").lower()
    if side not in ["buy", "sell"]:
        raise HTTPException(status_code=400, detail="Invalid action")

    symbol = data.get("symbol", "BTCUSDT")
    usdt_amount = float(data.get("usdt_amount", 10))
    exchange_name = data.get("exchange", "bybit").lower()  # –ë–µ—Ä–µ–º –±–∏—Ä–∂—É –∏–∑ —Å–∏–≥–Ω–∞–ª–∞

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π request_id
    request_id = generate_request_id(symbol, side)
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {request_id} –Ω–∞ –±–∏—Ä–∂–µ {exchange_name}")

    # –ü–æ–ª—É—á–∞–µ–º –±–∏—Ä–∂—É –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ (–±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω)
    try:
        exchange = exchange_selector.get_exchange_by_name(exchange_name)
        price = exchange.get_last_price(symbol)
        logger.info(f"üöÄ –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {exchange.name}: {side} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏—Ä–∂–∏ '{exchange_name}': {e}"
        logger.error(error_msg)
        
        try:
            await notify_error(error_msg, f"–û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ –¥–ª—è {side} {symbol}")
        except Exception as telegram_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
        
        return {
            "status": "Error",
            "reason": "Invalid exchange",
            "exchange": exchange_name,
            "symbol": symbol
        }

    # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–Ω–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ
    if side == "sell":
        coin_symbol = symbol.replace("USDT", "")
        coin_balance = exchange.get_balance(coin_symbol)
        unsold_qty = get_unsold_quantity(exchange.name, symbol)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {symbol} –Ω–∞ {exchange.name}: –±–∞–ª–∞–Ω—Å={coin_balance:.6f}, –Ω–µ–ø—Ä–æ–¥–∞–Ω–æ={unsold_qty:.6f}")
        
        if coin_balance <= 0 or unsold_qty <= 0:
            error_msg = f"–ù–µ—Ç {coin_symbol} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {exchange.name}. –ë–∞–ª–∞–Ω—Å: {coin_balance:.6f}, –Ω–µ–ø—Ä–æ–¥–∞–Ω–æ: {unsold_qty:.6f}"
            logger.warning(error_msg)
            
            try:
                await notify_error(error_msg, f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –º–æ–Ω–µ—Ç {symbol}")
            except Exception as telegram_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
            
            return {
                "status": "Error",
                "reason": "No coins to sell",
                "symbol": symbol,
                "exchange": exchange.name,
                "balance": coin_balance,
                "unsold": unsold_qty
            }

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞
    balance_usdt = exchange.get_balance("USDT")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 10% –ª–∏–º–∏—Ç–∞
    if usdt_amount > balance_usdt * 0.1:
        error_msg = f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ ${usdt_amount:.2f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (${balance_usdt * 0.1:.2f})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤ Telegram
        try:
            await notify_error(error_msg, f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è {side} {symbol}")
        except Exception as telegram_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ: {telegram_error}")
        
        return {
            "status": "Error",
            "reason": "Amount exceeds 10% of balance",
            "balance": balance_usdt,
            "max_amount": balance_usdt * 0.1
        }

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á—ë—Ç–æ–º precision
    if side == "buy":
        qty = calculate_qty_by_precision(usdt_amount, price, 6)
        market_unit = "quoteCoin" if exchange.name == "Bybit" else None
    else:
        # –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å (–∫—É–ø–ª–µ–Ω–æ - –ø—Ä–æ–¥–∞–Ω–æ)
        coin_symbol = symbol.replace("USDT", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
        unsold_qty = get_unsold_quantity(exchange.name, symbol)
        coin_balance = exchange.get_balance(coin_symbol)
        
        logger.info(f"–î–µ—Ç–∞–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {symbol}: –±–∞–ª–∞–Ω—Å_–º–æ–Ω–µ—Ç={coin_balance:.6f}, –Ω–µ–ø—Ä–æ–¥–∞–Ω–æ_–ø–æ_–∏—Å—Ç–æ—Ä–∏–∏={unsold_qty:.6f}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∏ —á—Ç–æ –±—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ
        available_to_sell = min(coin_balance, unsold_qty)
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂–∏ {symbol}: –±–∞–ª–∞–Ω—Å={coin_balance}, –∫—É–ø–ª–µ–Ω–æ-–ø—Ä–æ–¥–∞–Ω–æ={unsold_qty}, –¥–æ—Å—Ç—É–ø–Ω–æ={available_to_sell}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        if available_to_sell <= 0:
            if unsold_qty <= 0:
                error_msg = f"–í—Å–µ {coin_symbol} —É–∂–µ –ø—Ä–æ–¥–∞–Ω—ã. –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å."
            else:
                error_msg = f"–ù–µ—Ç {coin_symbol} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ë–∞–ª–∞–Ω—Å: {coin_balance}"
            
            logger.warning(error_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
            try:
                await notify_error(error_msg, f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {symbol}")
            except Exception as telegram_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
            
            return {
                "status": "Error",
                "reason": "No coins to sell",
                "coin_symbol": coin_symbol,
                "coin_balance": coin_balance,
                "unsold_qty": unsold_qty,
                "available_to_sell": available_to_sell
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, $1)
        estimated_value = available_to_sell * price
        if estimated_value < 1.0:
            error_msg = f"–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: ${estimated_value:.4f} (–º–∏–Ω. $1.00)"
            logger.warning(error_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
            try:
                await notify_error(error_msg, f"–ú–∞–ª–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ {symbol}")
            except Exception as telegram_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")
            
            return {
                "status": "Error",
                "reason": "Amount too small",
                "coin_symbol": coin_symbol,
                "available_to_sell": available_to_sell,
                "estimated_value": estimated_value
            }
        
        qty = available_to_sell
        market_unit = "baseCoin" if exchange.name == "Bybit" else None

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º request_id
    request_id = generate_request_id(symbol, side)

    try:
        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        result = exchange.place_order(side, symbol, qty, market_unit)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        balance_after = exchange.get_balance("USDT")
        
        # –ö–æ–º–∏—Å—Å–∏—è —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤ place_order
        fee = result.get("fee", 0.0) if isinstance(result, dict) else 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
        profit = None
        profit_no_fees = None
        if side == "sell":
            last_buy_price = get_last_buy_price(exchange.name, symbol)
            if last_buy_price:
                # –ü—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π (—Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞)
                profit = (price - last_buy_price) * qty - fee
                
                # –ü—Ä–∏–±—ã–ª—å –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
                profit_no_fees = (price - last_buy_price) * qty
                
                logger.info(f"–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ {symbol}: —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏={last_buy_price}, —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏={price}")
                logger.info(f"–ü—Ä–∏–±—ã–ª—å –ë–ï–ó –∫–æ–º–∏—Å—Å–∏–π: ${profit_no_fees:.4f}, –° –∫–æ–º–∏—Å—Å–∏—è–º–∏: ${profit:.4f}, –ö–æ–º–∏—Å—Å–∏—è: ${fee:.4f}")
        # –î–ª—è –ø–æ–∫—É–ø–æ–∫ (side == "buy") profit –æ—Å—Ç–∞–µ—Ç—Å—è None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
    trade_data = {
            "request_id": request_id,
            "timestamp": datetime.now(timezone.utc).isoformat(),
        "exchange": exchange.name,
        "side": side,
        "symbol": symbol,
        "price": price,
        "qty": qty,
            "amount_usdt": usdt_amount if side == "buy" else qty * price,
        "fee": fee,
        "profit": profit,
            "profit_no_fees": profit_no_fees,
        "balance_after": balance_after,
        "note": str(result)
    }
    save_trade(trade_data)

        logger.info(f"–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {request_id} - {side} {qty} {symbol} –ø–æ {price}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try:
            await notify_trade(trade_data)
        except Exception as telegram_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {telegram_error}")

        return {
            "status": "ok", 
            "request_id": request_id,
            "exchange": exchange.name,
            "order": result, 
            "balance_after": balance_after,
            "profit": profit
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        try:
            await notify_error(str(e), f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {side} {symbol}")
        except Exception as telegram_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {telegram_error}")
        
        raise HTTPException(status_code=500, detail=str(e))
