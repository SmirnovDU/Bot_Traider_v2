#!/usr/bin/env python3

import os
import sys
import asyncio

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'test_secret'
os.environ['DEFAULT_EXCHANGE'] = 'bybit'
os.environ['TEST_BALANCE_USDT'] = '1000'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

async def test_smart_sell():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ - –ø—Ä–æ–¥–∞–µ—Ç –Ω–∞ —Ç–æ–π –±–∏—Ä–∂–µ –≥–¥–µ –ø–æ–∫—É–ø–∞–ª"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏...")
    
    from bot.db import init_db, init_test_balances, get_exchange_with_coins, get_unsold_quantity
    from bot.webhook import webhook
    from fastapi import Request
    from unittest.mock import AsyncMock
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    init_test_balances()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    symbols = ["DOTUSDT", "ETHUSDT", "BTCUSDT"]
    
    print("üìä –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç –ø–æ –±–∏—Ä–∂–∞–º:")
    for symbol in symbols:
        bybit_qty = get_unsold_quantity("Bybit", symbol)
        binance_qty = get_unsold_quantity("Binance", symbol)
        exchange_with_coins = get_exchange_with_coins(symbol)
        
        print(f"  {symbol}:")
        print(f"    Bybit: {bybit_qty:.6f}")
        print(f"    Binance: {binance_qty:.6f}")
        print(f"    –ú–∞–∫—Å–∏–º—É–º –Ω–∞: {exchange_with_coins}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É DOTUSDT (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ Bybit)
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É DOTUSDT:")
    
    # –°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∏—Ä–∂–∏)
    sell_signal = {
        "secret": "test_secret",
        "action": "sell",
        "symbol": "DOTUSDT",
        "usdt_amount": 10  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∂
    }
    
    # –°–æ–∑–¥–∞—ë–º mock request
    mock_request = AsyncMock(spec=Request)
    mock_request.json = AsyncMock(return_value=sell_signal)
    
    try:
        result = await webhook(mock_request)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏: {result}")
        
        if result.get("status") == "ok":
            exchange_used = result.get("exchange")
            print(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ: {exchange_used}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∏—Ä–∂–∞
            expected_exchange = get_exchange_with_coins("DOTUSDT")
            if exchange_used == expected_exchange:
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∏—Ä–∂–∞: {exchange_used}")
            else:
                print(f"‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –±–∏—Ä–∂–∞ {expected_exchange}, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ {exchange_used}")
                
        elif result.get("status") == "Error":
            reason = result.get("reason")
            if reason == "No coins to sell":
                print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            else:
                print(f"‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {reason}")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–Ω–µ—Ç—ã
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–Ω–µ—Ç—ã:")
    
    fake_sell_signal = {
        "secret": "test_secret", 
        "action": "sell",
        "symbol": "FAKEUSDT",
        "usdt_amount": 10
    }
    
    mock_request.json = AsyncMock(return_value=fake_sell_signal)
    
    try:
        result = await webhook(mock_request)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        if result.get("reason") == "No coins to sell":
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_smart_sell())
