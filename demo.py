#!/usr/bin/env python3

"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è TradingView
–í–µ—Ä—Å–∏—è 1.0 - –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import os
import sys
import time

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ
os.environ['TEST_MODE'] = 'True'
os.environ['WEBHOOK_SECRET'] = 'demo_secret_123'
os.environ['DEFAULT_EXCHANGE'] = 'bybit'
os.environ['TEST_BALANCE_USDT'] = '1000'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('bot')

def demo():
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê –î–õ–Ø TRADINGVIEW")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    from bot.main import app
    from bot.db import init_db, init_test_balances, get_all_balances
    from bot.exchanges.bybit import BybitExchange
    from bot.exchanges.binance import BinanceExchange
    from fastapi.testclient import TestClient
    
    print("\nüìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    init_db()
    init_test_balances()
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    client = TestClient(app)
    
    print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüí∞ –ù–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
    response = client.get("/balances")
    balances = response.json()["balances"]
    for balance in balances:
        print(f"  {balance[0]}: {balance[2]} {balance[1]}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    print("\nüü¢ –î–ï–ú–û: –ü–æ–∫—É–ø–∫–∞ BTC")
    print("-" * 30)
    
    buy_data = {
        "secret": "demo_secret_123",
        "action": "buy",
        "symbol": "BTCUSDT",
        "usdt_amount": 100,
        "exchange": "bybit"
    }
    
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª: {buy_data}")
    response = client.post("/webhook", json=buy_data)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        print(f"  Request ID: {result['request_id']}")
        print(f"  –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {result['balance_after']} USDT")
        print(f"  –ö–æ–º–∏—Å—Å–∏—è: {result['order']['fee']} USDT")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüí∞ –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:")
    response = client.get("/balances")
    balances = response.json()["balances"]
    for balance in balances:
        print(f"  {balance[0]}: {balance[2]} {balance[1]}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É
    print("\nüî¥ –î–ï–ú–û: –ü—Ä–æ–¥–∞–∂–∞ BTC")
    print("-" * 30)
    
    sell_data = {
        "secret": "demo_secret_123",
        "action": "sell",
        "symbol": "BTCUSDT",
        "exchange": "bybit"
    }
    
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª: {sell_data}")
    response = client.post("/webhook", json=sell_data)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        print(f"  Request ID: {result['request_id']}")
        print(f"  –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {result['balance_after']} USDT")
        if result.get('profit'):
            print(f"  –ü—Ä–∏–±—ã–ª—å: {result['profit']} USDT")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüí∞ –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
    response = client.get("/balances")
    balances = response.json()["balances"]
    for balance in balances:
        print(f"  {balance[0]}: {balance[2]} {balance[1]}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
    print("\n‚ö†Ô∏è  –î–ï–ú–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤")
    print("-" * 30)
    
    large_buy_data = {
        "secret": "demo_secret_123",
        "action": "buy",
        "symbol": "ETHUSDT",
        "usdt_amount": 500,  # 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ - –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 10%
        "exchange": "bybit"
    }
    
    print(f"–ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å –Ω–∞ {large_buy_data['usdt_amount']} USDT (50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)")
    response = client.post("/webhook", json=large_buy_data)
    
    if response.status_code == 200:
        result = response.json()
        if result.get('status') == 'Error':
            print(f"‚úÖ –õ–∏–º–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª: {result['reason']}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {result['max_amount']} USDT")
        else:
            print(f"‚ùå –õ–∏–º–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("-" * 30)
    
    import sqlite3
    conn = sqlite3.connect('bot/trades.db')
    cur = conn.cursor()
    
    cur.execute("SELECT COUNT(*) FROM trades")
    total_trades = cur.fetchone()[0]
    
    cur.execute("SELECT SUM(profit) FROM trades WHERE profit IS NOT NULL")
    total_profit = cur.fetchone()[0] or 0
    
    cur.execute("SELECT COUNT(*) FROM trades WHERE side='buy'")
    buy_trades = cur.fetchone()[0]
    
    cur.execute("SELECT COUNT(*) FROM trades WHERE side='sell'")
    sell_trades = cur.fetchone()[0]
    
    conn.close()
    
    print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
    print(f"–ü–æ–∫—É–ø–æ–∫: {buy_trades}")
    print(f"–ü—Ä–æ–¥–∞–∂: {sell_trades}")
    print(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} USDT")
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\nüìù –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:")
    print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Bybit –∏ Binance")
    print("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏ –±–æ–µ–≤–æ–π —Ä–µ–∂–∏–º—ã")
    print("  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π 10%")
    print("  ‚úÖ –£—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–π")
    print("  ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ request_id")
    print("  ‚úÖ –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")
    print("  ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ SQLite")
    print("  ‚úÖ Webhook –¥–ª—è TradingView")
    print("  ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è")


if __name__ == "__main__":
    demo()
