#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–¥–∞–∂–∏ –º–æ–Ω–µ—Ç
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from loguru import logger
from bot.mass_operations import sell_all_coins, sell_all_binance, sell_all_bybit
from bot.db import get_all_balances


async def test_mass_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüìä –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:")
    balances = get_all_balances()
    if balances:
        for balance in balances:
            print(f"‚Ä¢ {balance['exchange']}: {balance['amount']} {balance['coin']}")
    else:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance
    print("\nüîÑ –¢–µ—Å—Ç 1: –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance")
    result = await sell_all_binance()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Bybit
    print("\nüîÑ –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Bybit")
    result = await sell_all_bybit()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö
    print("\nüîÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö")
    result = await sell_all_coins()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print("\n" + "=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    print("\nüìä –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π:")
    balances = get_all_balances()
    if balances:
        for balance in balances:
            print(f"‚Ä¢ {balance['exchange']}: {balance['amount']} {balance['coin']}")
    else:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")


async def test_single_operation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
    print("\nüìä –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:")
    balances = get_all_balances()
    if balances:
        for balance in balances:
            print(f"‚Ä¢ {balance['exchange']}: {balance['amount']} {balance['coin']}")
    else:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–Ω–µ USDT)
    coin_to_sell = None
    for balance in balances:
        if balance['coin'] != 'USDT' and balance['amount'] > 0:
            coin_to_sell = balance
            break
    
    if not coin_to_sell:
        print("–ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—Ç–æ–ª—å–∫–æ USDT)")
        return
    
    print(f"\nüîÑ –ü—Ä–æ–¥–∞—ë–º {coin_to_sell['amount']} {coin_to_sell['coin']} –Ω–∞ {coin_to_sell['exchange']}")
    
    # –ü—Ä–æ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ
    if coin_to_sell['exchange'].lower() == 'binance':
        result = await sell_all_binance()
    else:
        result = await sell_all_bybit()
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏!")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:\n1. –¢–µ—Å—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n2. –¢–µ—Å—Ç –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n3. –í—ã—Ö–æ–¥\n–í–∞—à –≤—ã–±–æ—Ä: ")
    
    if choice == "1":
        asyncio.run(test_mass_operations())
    elif choice == "2":
        asyncio.run(test_single_operation())
    else:
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
